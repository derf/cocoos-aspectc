#ifndef ATTRIBUTES_AH
#define ATTRIBUTES_AH
#include <msp430.h>

extern void illegal_thread_declaration(void);
extern void illegal_isr_function_call(void);

extern void uart_puts(char *s);

// can also be implemented to log the call via UART
extern void deprecated_function_call(const char *);

//unsigned char ints_enabled(void) {
//	return 0;
//}

namespace OS {
	attribute task();
	attribute schedulerCall();
	attribute idle();
	attribute tick();
	attribute ISROnly();
};

namespace TaskAPI {
	attribute create();
	attribute kill();
};

namespace GCCAttr {
	attribute deprecated();
	attribute disinterrupt();
	attribute legacy();
};

aspect ErrorAvoidance {

	advice call(OS::ISROnly()) && within(OS::task()) : before() {
		static_assert(sizeof(JoinPoint::That) == 0,
			"ISR function called from non-ISR context");
	}

	/*
	advice call(GCCAttr::deprecated()) && !within(GCCAttr::legacy()) : before() {
		static_assert(sizeof(JoinPoint::That) == 0,
			"Call to a deprecated function");
	}
	*/

	/*
	// for run-time notifications
	advice call(GCCAttr::deprecated()) && !cflow(execution(GCCAttr::legacy())) : before() {
		uart_puts((char *)"Call to deprecated function ");
		uart_puts((char *)tjp->signature());
		uart_puts((char *)"\n");
	}
	*/

	/*
	// causes 4 Byte size increase (1 inlined xor instruction)
	advice execution(OS::tick()) : before() {
		P1OUT ^= BIT0;
	}
	*/

	/*
	// causes ~72 Byte size increase
	advice execution(GCCAttr::disinterrupt()) : around() {
		__dint();
		tjp->proceed();
		__eint();
	}
	*/

	/*
	// causes 4 Byte size increase
	advice execution(GCCAttr::disinterrupt()) : before() {
		__dint();
	}
	advice execution(GCCAttr::disinterrupt()) : after() {
		__eint();
	}
	*/

	/*
	// doesn't match indirectly nested calls, only direct ones
	advice call(GCCAttr::disinterrupt()) && !within(GCCAttr::disinterrupt()) : around() {
		__dint();
		tjp->proceed();
		__eint();
	}
	*/

	/*
	// doesn't match indirectly nested calls, only direct ones
	advice call(GCCAttr::disinterrupt()) && !within(GCCAttr::disinterrupt()) : before() {
		__dint();
	}
	advice call(GCCAttr::disinterrupt()) && !within(GCCAttr::disinterrupt()) : after() {
		__eint();
	}
	*/

	/*
	// matches ALL the cases (even indirect calls)
	advice call(GCCAttr::disinterrupt()) && !cflow(execution(GCCAttr::disinterrupt())) : around() {
		__dint();
		tjp->proceed();
		__eint();
	}
	*/

	/*
	advice call(GCCAttr::disinterrupt()) && !cflow(execution(GCCAttr::disinterrupt())) : before() {
		__dint();
	}
	advice call(GCCAttr::disinterrupt()) && !cflow(execution(GCCAttr::disinterrupt())) : after() {
		__eint();
	}
	*/

};

#endif
